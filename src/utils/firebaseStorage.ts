import { database } from './firebase';
import { ref, set, get, remove, push, update } from 'firebase/database';
import { Language } from './types';

export interface RoutePrice {
  id: string;
  price: string;
  icon: string;
  order?: number;
  priceDescription?: string;
  priceDescriptions?: {
    sr: string;
    en: string;
    ru: string;
  };
  names: {
    sr: string;
    en: string;
    ru: string;
  };
  whatsappMessages: {
    sr: string;
    en: string;
    ru: string;
  };
}

// Default routes data with multilingual price descriptions
const defaultRoutes: RoutePrice[] = [
  {
    id: 'novi-sad-beograd',
    price: '6.000',
    icon: '‚úàÔ∏è',
    order: 1,
    priceDescriptions: {
      sr: 'po vozilu (cena je do 3 osobe, za ƒçetvrtu odraslu osobu je +1000rsd na cenu, deca nemaju doplatu)',
      en: 'per vehicle (price is for up to 3 people, 4th adult person +1000rsd to the price, children have no surcharge)',
      ru: '–∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å (—Ü–µ–Ω–∞ –¥–æ 3 —á–µ–ª–æ–≤–µ–∫, –∑–∞ 4-–≥–æ –≤–∑—Ä–æ—Å–ª–æ–≥–æ +1000 –¥–∏–Ω–∞—Ä–æ–≤ –∫ —Ü–µ–Ω–µ, –¥–µ—Ç–∏ –±–µ–∑ –¥–æ–ø–ª–∞—Ç—ã)'
    },
    names: {
      sr: 'Srbobran ‚áÑ Aerodrom Beograd',
      en: 'Srbobran ‚áÑ Belgrade Airport',
      ru: '–°—Ä–±–æ–±—Ä–∞–Ω ‚áÑ –ê—ç—Ä–æ–ø–æ—Ä—Ç –ë–µ–ª–≥—Ä–∞–¥'
    },
    whatsappMessages: {
      sr: 'Zdravo! Zainteresovan/a sam za aerodromski transfer Srbobran - Beograd. Molim Vas po≈°aljite mi vi≈°e informacija o rezervaciji.',
      en: 'Hello! I am interested in airport transfer Srbobran - Belgrade. Please send me more information about booking.',
      ru: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä –≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç –°—Ä–±–æ–±—Ä–∞–Ω - –ë–µ–ª–≥—Ä–∞–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.'
    }
  },
  {
    id: 'novi-sad-budimpesta',
    price: '23.500',
    icon: 'üá≠üá∫',
    order: 2,
    priceDescriptions: {
      sr: 'po vozilu (cena je do 3 osobe, za ƒçetvrtu odraslu osobu je +1500rsd na cenu, deca nemaju doplatu)',
      en: 'per vehicle (price is for up to 3 people, 4th adult person +1500rsd to the price, children have no surcharge)',
      ru: '–∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å (—Ü–µ–Ω–∞ –¥–æ 3 —á–µ–ª–æ–≤–µ–∫, –∑–∞ 4-–≥–æ –≤–∑—Ä–æ—Å–ª–æ–≥–æ +1500 –¥–∏–Ω–∞—Ä–æ–≤ –∫ —Ü–µ–Ω–µ, –¥–µ—Ç–∏ –±–µ–∑ –¥–æ–ø–ª–∞—Ç—ã)'
    },
    names: {
      sr: 'Srbobran ‚áÑ Budimpe≈°ta Aerodrom',
      en: 'Srbobran ‚áÑ Budapest Airport',
      ru: '–°—Ä–±–æ–±—Ä–∞–Ω ‚áÑ –ê—ç—Ä–æ–ø–æ—Ä—Ç –ë—É–¥–∞–ø–µ—à—Ç'
    },
    whatsappMessages: {
      sr: 'Zdravo! Zainteresovan/a sam za meƒëunarodni transfer Srbobran - Budimpe≈°ta. Molim Vas kontaktirajte me za rezervaciju.',
      en: 'Hello! I am interested in international transfer Srbobran - Budapest. Please contact me for booking.',
      ru: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä –°—Ä–±–æ–±—Ä–∞–Ω - –ë—É–¥–∞–ø–µ—à—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.'
    }
  },
  {
    id: 'novi-sad-zagreb',
    price: '35.000',
    icon: 'üá≠üá∑',
    order: 3,
    priceDescriptions: {
      sr: 'po vozilu (cena je do 3 osobe, za ƒçetvrtu odraslu osobu je +2000rsd na cenu, deca nemaju doplatu)',
      en: 'per vehicle (price is for up to 3 people, 4th adult person +2000rsd to the price, children have no surcharge)',
      ru: '–∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å (—Ü–µ–Ω–∞ –¥–æ 3 —á–µ–ª–æ–≤–µ–∫, –∑–∞ 4-–≥–æ –≤–∑—Ä–æ—Å–ª–æ–≥–æ +2000 –¥–∏–Ω–∞—Ä–æ–≤ –∫ —Ü–µ–Ω–µ, –¥–µ—Ç–∏ –±–µ–∑ –¥–æ–ø–ª–∞—Ç—ã)'
    },
    names: {
      sr: 'Srbobran ‚áÑ Zagreb Aerodrom',
      en: 'Srbobran ‚áÑ Zagreb Airport',
      ru: '–°—Ä–±–æ–±—Ä–∞–Ω ‚áÑ –ê—ç—Ä–æ–ø–æ—Ä—Ç –ó–∞–≥—Ä–µ–±'
    },
    whatsappMessages: {
      sr: 'Zdravo! Zainteresovan/a sam za meƒëunarodni transfer Srbobran - Zagreb. Molim Vas po≈°aljite mi detalje o rezervaciji.',
      en: 'Hello! I am interested in international transfer Srbobran - Zagreb. Please send me booking details.',
      ru: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä –°—Ä–±–æ–±—Ä–∞–Ω - –ó–∞–≥—Ä–µ–±. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.'
    }
  },
  {
    id: 'novi-sad-temisvar',
    price: '12.000',
    icon: 'üá∑üá¥',
    order: 4,
    priceDescriptions: {
      sr: 'po vozilu (cena je do 3 osobe, za ƒçetvrtu odraslu osobu je +1200rsd na cenu, deca nemaju doplatu)',
      en: 'per vehicle (price is for up to 3 people, 4th adult person +1200rsd to the price, children have no surcharge)',
      ru: '–∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å (—Ü–µ–Ω–∞ –¥–æ 3 —á–µ–ª–æ–≤–µ–∫, –∑–∞ 4-–≥–æ –≤–∑—Ä–æ—Å–ª–æ–≥–æ +1200 –¥–∏–Ω–∞—Ä–æ–≤ –∫ —Ü–µ–Ω–µ, –¥–µ—Ç–∏ –±–µ–∑ –¥–æ–ø–ª–∞—Ç—ã)'
    },
    names: {
      sr: 'Srbobran ‚áÑ Temi≈°var Aerodrom',
      en: 'Srbobran ‚áÑ Timisoara Airport',
      ru: '–°—Ä–±–æ–±—Ä–∞–Ω ‚áÑ –ê—ç—Ä–æ–ø–æ—Ä—Ç –¢–∏–º–∏—à–æ–∞—Ä–∞'
    },
    whatsappMessages: {
      sr: 'Zdravo! Zainteresovan/a sam za transfer Srbobran - Temi≈°var. Molim Vas kontaktirajte me za vi≈°e informacija.',
      en: 'Hello! I am interested in transfer Srbobran - Timisoara. Please contact me for more information.',
      ru: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä –°—Ä–±–æ–±—Ä–∞–Ω - –¢–∏–º–∏—à–æ–∞—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.'
    }
  },
  {
    id: 'novi-sad-nis',
    price: '15.000',
    icon: 'üõ´',
    order: 5,
    priceDescriptions: {
      sr: 'po vozilu (cena je do 3 osobe, za ƒçetvrtu odraslu osobu je +1300rsd na cenu, deca nemaju doplatu)',
      en: 'per vehicle (price is for up to 3 people, 4th adult person +1300rsd to the price, children have no surcharge)',
      ru: '–∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å (—Ü–µ–Ω–∞ –¥–æ 3 —á–µ–ª–æ–≤–µ–∫, –∑–∞ 4-–≥–æ –≤–∑—Ä–æ—Å–ª–æ–≥–æ +1300 –¥–∏–Ω–∞—Ä–æ–≤ –∫ —Ü–µ–Ω–µ, –¥–µ—Ç–∏ –±–µ–∑ –¥–æ–ø–ª–∞—Ç—ã)'
    },
    names: {
      sr: 'Srbobran ‚áÑ Ni≈° Aerodrom',
      en: 'Srbobran ‚áÑ Ni≈° Airport',
      ru: '–°—Ä–±–æ–±—Ä–∞–Ω ‚áÑ –ê—ç—Ä–æ–ø–æ—Ä—Ç –ù–∏—à'
    },
    whatsappMessages: {
      sr: 'Zdravo! Zainteresovan/a sam za transfer Srbobran - Ni≈°. Molim Vas po≈°aljite mi informacije o rezervaciji.',
      en: 'Hello! I am interested in transfer Srbobran - Ni≈°. Please send me booking information.',
      ru: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä –°—Ä–±–æ–±—Ä–∞–Ω - –ù–∏—à. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.'
    }
  },
  {
    id: 'novi-sad-segedin',
    price: '8.500',
    icon: 'üá≠üá∫',
    order: 6,
    priceDescriptions: {
      sr: 'po vozilu (cena je do 3 osobe, za ƒçetvrtu odraslu osobu je +1100rsd na cenu, deca nemaju doplatu)',
      en: 'per vehicle (price is for up to 3 people, 4th adult person +1100rsd to the price, children have no surcharge)',
      ru: '–∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å (—Ü–µ–Ω–∞ –¥–æ 3 —á–µ–ª–æ–≤–µ–∫, –∑–∞ 4-–≥–æ –≤–∑—Ä–æ—Å–ª–æ–≥–æ +1100 –¥–∏–Ω–∞—Ä–æ–≤ –∫ —Ü–µ–Ω–µ, –¥–µ—Ç–∏ –±–µ–∑ –¥–æ–ø–ª–∞—Ç—ã)'
    },
    names: {
      sr: 'Srbobran ‚áÑ Segedin',
      en: 'Srbobran ‚áÑ Szeged',
      ru: '–°—Ä–±–æ–±—Ä–∞–Ω ‚áÑ –°–µ–≥–µ–¥'
    },
    whatsappMessages: {
      sr: 'Zdravo! Zainteresovan/a sam za transfer Srbobran - Segedin. Molim Vas kontaktirajte me za rezervaciju.',
      en: 'Hello! I am interested in transfer Srbobran - Szeged. Please contact me for booking.',
      ru: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä –°—Ä–±–æ–±—Ä–∞–Ω - –°–µ–≥–µ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.'
    }
  }
];

// Initialize default data if not exists
export const initializeDefaultData = async (): Promise<void> => {
  try {
    const routesRef = ref(database, 'routes');
    const snapshot = await get(routesRef);
    
    if (!snapshot.exists()) {
      console.log('Initializing default routes data...');
      await set(routesRef, defaultRoutes);
    }
  } catch (error) {
    console.error('Error initializing default data:', error);
  }
};

// Get all routes from Firebase
export const getPrices = async (): Promise<RoutePrice[]> => {
  try {
    const routesRef = ref(database, 'routes');
    const snapshot = await get(routesRef);
    
    if (snapshot.exists()) {
      const data = snapshot.val();
      const routes = Array.isArray(data) ? data : Object.values(data);
      
      // Sort by order field, fallback to original order
      return routes.sort((a: any, b: any) => {
        const orderA = a.order || 999;
        const orderB = b.order || 999;
        return orderA - orderB;
      });
    }
    
    return [];
  } catch (error) {
    console.error('Error getting prices from Firebase:', error);
    return [];
  }
};

// Save all routes to Firebase
export const savePrices = async (routes: RoutePrice[]): Promise<boolean> => {
  try {
    const routesRef = ref(database, 'routes');
    await set(routesRef, routes);
    return true;
  } catch (error) {
    console.error('Error saving prices to Firebase:', error);
    return false;
  }
};

// Reset to default routes
export const resetPrices = async (): Promise<boolean> => {
  try {
    const routesRef = ref(database, 'routes');
    await set(routesRef, defaultRoutes);
    return true;
  } catch (error) {
    console.error('Error resetting prices in Firebase:', error);
    return false;
  }
};

// Update a specific route
export const updateRoute = async (routeId: string, routeData: RoutePrice): Promise<boolean> => {
  try {
    const routes = await getPrices();
    const routeIndex = routes.findIndex(r => r.id === routeId);
    
    if (routeIndex !== -1) {
      routes[routeIndex] = routeData;
      return await savePrices(routes);
    }
    
    return false;
  } catch (error) {
    console.error('Error updating route in Firebase:', error);
    return false;
  }
};

// Delete a route
export const deleteRoute = async (routeId: string): Promise<boolean> => {
  try {
    const routes = await getPrices();
    const filteredRoutes = routes.filter(r => r.id !== routeId);
    return await savePrices(filteredRoutes);
  } catch (error) {
    console.error('Error deleting route from Firebase:', error);
    return false;
  }
};

// Add a new route
export const addRoute = async (routeData: RoutePrice): Promise<boolean> => {
  try {
    const routes = await getPrices();
    
    // Set order to be last + 1
    const maxOrder = Math.max(...routes.map(r => r.order || 0), 0);
    routeData.order = maxOrder + 1;
    
    routes.push(routeData);
    return await savePrices(routes);
  } catch (error) {
    console.error('Error adding route to Firebase:', error);
    return false;
  }
};

// Update route order
export const updateRouteOrder = async (routeId: string, newOrder: number): Promise<boolean> => {
  try {
    const routes = await getPrices();
    const routeIndex = routes.findIndex(r => r.id === routeId);
    
    if (routeIndex !== -1) {
      routes[routeIndex].order = newOrder;
      return await savePrices(routes);
    }
    
    return false;
  } catch (error) {
    console.error('Error updating route order in Firebase:', error);
    return false;
  }
};

// Reorder all routes
export const reorderRoutes = async (reorderedRoutes: RoutePrice[]): Promise<boolean> => {
  try {
    // Update order field for each route
    const routesWithOrder = reorderedRoutes.map((route, index) => ({
      ...route,
      order: index + 1
    }));
    
    return await savePrices(routesWithOrder);
  } catch (error) {
    console.error('Error reordering routes in Firebase:', error);
    return false;
  }
};

// Helper functions
export const getRouteName = (routeId: string, language: Language, routes: RoutePrice[]): string => {
  const route = routes.find(r => r.id === routeId);
  return route?.names[language] || routeId;
};

export const getPriceDescription = (routeId: string, language: Language, routes: RoutePrice[]): string => {
  const route = routes.find(r => r.id === routeId);
  
  // Use new multilingual descriptions if available
  if (route?.priceDescriptions?.[language]) {
    return route.priceDescriptions[language];
  }
  
  // Fallback to old single description
  if (route?.priceDescription) {
    return route.priceDescription;
  }
  
  // Default fallback
  const defaults = {
    sr: 'po vozilu (do 3 osobe + 1500 po osobi)',
    en: 'per vehicle (up to 3 people + 1500 per person)',
    ru: '–∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å (–¥–æ 3 —á–µ–ª–æ–≤–µ–∫ + 1500 –∑–∞ —á–µ–ª–æ–≤–µ–∫–∞)'
  };
  
  return defaults[language];
};

export const getWhatsAppMessage = (routeId: string, language: Language, routes: RoutePrice[]): string => {
  const route = routes.find(r => r.id === routeId);
  return route?.whatsappMessages[language] || `Zdravo! Zainteresovan/a sam za transfer ${routeId}.`;
};